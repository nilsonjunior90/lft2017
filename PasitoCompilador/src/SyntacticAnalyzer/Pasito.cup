package SyntacticAnalyzer;

import java.io.FileInputStream;
import LexicalAnalyzer.LexicalAnalyzer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;

parser code {:
  protected LexicalAnalyzer lexer; // cria objeto LexicalAnalyzer (classe criada pelo JFlex com os automatos)
  :};

init with {:
    ComplexSymbolFactory f = new ComplexSymbolFactory(); // cria instância do ComplexSymbolFactory
    symbolFactory = f;

    File file = new File(Paths.get("").toAbsolutePath().toString() + "/Files4Test/" + "entrada-completa.pas"); // fazendo ler direto o arquivo de entrada em Pasito
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new LexicalAnalyzer(f,fis); // chamando construtor do LexicalAnalyzer com symbolFactory e arquivo de entrada em pasito
:};

scan with {:
    return lexer.next_token(); // chama próximo token
:};

/* @@@@@@@@@@@@ terminais (tokens retornados pelo analisador léxico, utilizados para criar classe Symbol) @@@@@@@@@@@@ */
terminal PLUS, MINUS;
terminal AND;
terminal DOT, COMMA, SEMICOLON;
terminal BOOLEAN;
terminal DEFAULT, FUNC, IF, SWITCH, FOR, VAR, STRUCT, FALLTHROUGH, INTERFACE, TYPE, RETURN, CASE;
terminal NUMBER;
terminal STRING;
/* @@@@@@@@@ Organizar essa parte @@@@@@@@@@@*/
terminal REM, NEQ, STAR, LE, LT, GT, GE, OR, EQ, SLASH, LPAREN, RPAREN, RBRACE, LBRACE, LBRACKET, RBRACKET;

nonterminal expr, expr_list;

/* Precedences */
precedence left PLUS, MINUS;

/* The grammar rules */
expr_list ::= expr_list expr SEMICOLON         
            | expr SEMICOLON                  
            ;
            
expr      ::= expr PLUS  expr        
             | expr MINUS expr 
             | NUMBER            
             ;
